# Generated by Django 4.0.4 on 2022-04-24 05:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='VehicleData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(max_length=120)),
                ('speed', models.DecimalField(decimal_places=15, max_digits=30)),
                ('speedlimit', models.DecimalField(decimal_places=15, max_digits=30)),
                ('longitude', models.CharField(max_length=120)),
                ('latitude', models.CharField(max_length=120)),
                ('ABSIndLampStatus', models.IntegerField(default=0)),
                ('AutomaticOilChange', models.IntegerField(default=0)),
                ('Door_Ajar_Status', models.IntegerField(default=0)),
                ('DriverBelt', models.IntegerField(default=0)),
                ('FuelLvlLow', models.IntegerField(default=0)),
                ('LowWasherFluid', models.IntegerField(default=0)),
                ('MaintenanceReminderStatus', models.IntegerField(default=0)),
                ('OilLifeSts', models.IntegerField(default=0)),
                ('PresentGear', models.IntegerField(default=0)),
                ('TransOverTemp', models.IntegerField(default=0)),
                ('AvgFuelEcon', models.DecimalField(decimal_places=15, default=0.0, max_digits=30)),
                ('EngineRPM', models.IntegerField(default=0)),
                ('TirePressFL', models.IntegerField(default=0)),
                ('TirePressFR', models.IntegerField(default=0)),
                ('TirePressRL', models.IntegerField(default=0)),
                ('TirePressRR', models.IntegerField(default=0)),
                ('Altitude', models.IntegerField(default=0)),
                ('ATMPressure', models.IntegerField(default=0)),
                ('Odometer', models.IntegerField(default=0)),
                ('EngineCoolant', models.IntegerField(default=0)),
                ('EngineOilTemp', models.IntegerField(default=0)),
                ('SteeringWheelAngle', models.IntegerField(default=0)),
                ('ExteriorTemperature', models.IntegerField(default=0)),
                ('AverageTemp', models.IntegerField(default=0)),
                ('TargetGear', models.IntegerField(default=0)),
                ('TurnInd_LT_ON', models.IntegerField(default=0)),
                ('TurnInd_RT_ON', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(default=18)),
                ('score', models.IntegerField(default=650)),
                ('state', models.CharField(default='MI', max_length=120)),
                ('team', models.IntegerField(blank=True, default=1001)),
                ('make', models.CharField(default='Stellantis', max_length=120)),
                ('year', models.IntegerField(default=2022)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
